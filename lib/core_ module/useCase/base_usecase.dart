

 //طبعا قلنا اي حاجه بيز تبقى ابستراكت كلاس وده عملناه عشان نثبت اسماء الميثود بتوع اليوز كلاسز
 //عشان لو معانا ديفلوبر تانيين مايجيش يغير اسم الميثود وممكن مايظهرش انه ايرور لكن معرفش انادي ع للخبطة الاسماء
 import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import 'package:movies_tv/core_%20module/error/failure.dart';

//هسميها باراميترز عشان تعبر عن الداتا اللسي هبعتها الباراميترز بتاع الكول بتاع الجيت موفي ديتلز
 //فهييجي يضرب معاك يقولك عن الاكستيند ايه الباراميتر اللي هتدخله مع الموفي ديتلز فهكتبله اينت او ايا كان نوعه
 abstract class BaseUseCase <T, Parameters> {
  //ودلوقتي هنشوف ايه المشترك بين اليوز كيسز كلها هنلاقي انهم فيوتشر وبتاخد ايزيار وفيلير وليست اوف موفي(الريترن)
  //هتلاقيه ف اليوز كيس بيقولك انت عامل كول بنفس كل حاجه قبلها فهتعمل اوفر رايد بعد طبعا الاكستند
  //طب انا دلوقتي هتعامل مع الموفي ديتلز ازاي هستعمل دي وهى موفي يبقى اكيد في حاجه جينريك عامه
 //يبقى هخليها تستقبل تي تايب اي نوع يعني
  Future<Either<Failure, T >> call(Parameters parameters);

 }


 //هلاقي في حاجات مش محتاج لها ف الكول باراميتر فهعمل كلاس تاني لكده
 class NoParameters extends Equatable {
   const NoParameters ();
  @override
  List<Object?> get props => [] ;

 }


